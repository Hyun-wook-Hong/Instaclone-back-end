// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User{
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String    @unique
  email     String    @unique
  password  String 
  bio       String?
  avatar    String?
  photos    Photo[]
  // follwer, following data는 FollowRelation이라는 하나의 상관 관계를 가지는 것.
  followers User[]    @relation("FollowRelation", references: [id])
  following User[]    @relation("FollowRelation", references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

//Photo Model
model Photo{
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  file      String
  caption   String?
  hashtags  Hashtag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes      Like[]
  comments   Comment[]
}

//Hashtag Model
model Hashtag{
  id        Int       @id @default(autoincrement())
  hashtag   String    @unique
  photos    Photo[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt 
}

// Like / Unlike Model
model Like{
  id        Int       @id @default(autoincrement())
  photo     Photo     @relation(fields: [photoId], references: [id])
  user      User      @relation(fields: [userId],  references: [id])
  photoId   Int
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt 

  // compound unique, ID들을 복합으로 묶어서 unique 개체를 만들수있음
  @@unique([photoId, userId])
}

// Comments on Photo
model Comment{
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId],  references: [id]) 
  photo     Photo     @relation(fields: [photoId],  references: [id])     
  payload   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt 
  userId    Int
  photoId   Int
}